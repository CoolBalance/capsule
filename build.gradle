buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:0.8'
    }
}

subprojects {
    apply plugin: 'java'

    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    group               = "co.paralleluniverse"
    version             = "0.8.0-SNAPSHOT"
    status              = "integration"
    description         = "Simple Java deployment"
    ext.url             = "https://github.com/puniverse/capsule"
    ext.vendor          = "Parallel Universe Software Co."
    ext.licenseName     = "Eclipse Public License - v 1.0"
    ext.licenseUrl      = "http://www.eclipse.org/legal/epl-v10.html"
    ext.scmUrl          = "https://github.com/puniverse/capsule"
    ext.scmConnection   = "https://github.com/puniverse/capsule.git"
    ext.distDir         = "$buildDir/dist"
    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

    if (!project.hasProperty("sonatypeUsername") || !project.hasProperty("sonatypePassword")) {
        println "sonatype username or password not set"
        ext.sonatypeUsername = ""
        ext.sonatypePassword = ""
    }

    configurations {
        javancss
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile 'junit:junit:4.11'
        testCompile 'org.truth0:truth:0.23'
        testCompile 'org.mockito:mockito-all:1.9.5'
        testCompile 'com.google.jimfs:jimfs:1.0'
        javancss 'org.codehaus.javancss:javancss:33.54'
    }

    test {
        systemProperty "java.protocol.handler.pkgs", "co.paralleluniverse.filesystem"

        beforeTest { desc ->
            logger.quiet("Running test: " + desc)
        }

        afterTest { desc, result ->
            if(result.resultType == TestResult.ResultType.FAILURE) {
                logger.quiet("Failed test ${desc.name} [${desc.className}] with exception: ${result.exception}")
                if(result.exception != null) {
                    result.exception.printStackTrace()
                }
            }
        }
    }

    task run(type: JavaExec, dependsOn:[testClasses]) {
        classpath = sourceSets.main.runtimeClasspath
        if(project.hasProperty('mainClass')){
            main = project.mainClass
        }
        if(project.hasProperty('args')){
            args project.args.split('\\s+')
        }
    }

    tasks.withType(JavaExec) {
        classpath += sourceSets.test.runtimeClasspath
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task javancss(dependsOn: 'classes') << {
        //        ext.reportName = "$buildDir/javancss_metrics.txt"
        //        println 'Running javancss quality metrics tool to file://' + reportName
        ant {
            logging.level = LogLevel.INFO
            taskdef(name:'javancss', classname:'javancss.JavancssAntTask', classpath: configurations.javancss.asPath)
            javancss(
                srcdir:'src/main/java',
                abortOnFail:'true',
                generateReport:'true',
                packageMetrics:'true',
                classMetrics:'false',
                functionMetrics:'false'
                // outputFile: reportName,
            )
        }
    }

    assemble.dependsOn javancss

    ///////// Publish Artifacts
    apply plugin: 'maven'
    apply plugin: 'signing'

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
        //    archives distZip
    }

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(
                    url: (isReleaseVersion ?
                              "https://oss.sonatype.org/service/local/staging/deploy/maven2" :
                              "https://oss.sonatype.org/content/repositories/snapshots")) {
                    // User and Password are taken from ~/.gradle/gradle.properties
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                pom.project {
                    name project.name
                    packaging 'jar'
                    description project.description
                    url project.url
                    scm {
                        url project.scmUrl
                        connection project.scmConnection
                        developerConnection project.scmConnection
                    }
                    licenses {
                        license {
                            name project.licenseName
                            url project.licenseUrl
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'pron'
                            name 'Ron Pressler'
                        }
                    }
                }
            }
        }
    }

    defaultTasks 'build'
}

project (':capsule') {
    configurations {
        all*.exclude group: 'org.eclipse.sisu', module: '*'
        all*.exclude group: 'commons-codec', module: '*'
    }

    dependencies {
        compile 'org.eclipse.aether:aether-api:1.0.0.v20140518'
        compile 'org.eclipse.aether:aether-util:1.0.0.v20140518'
        runtime 'org.eclipse.aether:aether-impl:1.0.0.v20140518'
        compile 'org.eclipse.aether:aether-connector-basic:1.0.0.v20140518'
        compile 'org.eclipse.aether:aether-transport-file:1.0.0.v20140518'
        compile 'org.eclipse.aether:aether-transport-http:1.0.0.v20140518'
        compile 'org.apache.maven:maven-aether-provider:3.2.3'
        compile 'org.apache.maven:maven-model:3.2.3'
        runtime 'com.google.guava:guava:17.0' // necessary -- unfortunately -- for maven-aether-provider

        runtime 'org.slf4j:slf4j-nop:1.7.7'

        compile 'io.takari.aether:takari-local-repository:0.10.3'
        compile 'io.takari:takari-filemanager:0.8.1'

        testCompile project(':capsule-util')
    }

    //tasks.withType(Compile) {
    //    options.compilerArgs << "-Xlint:unchecked"
    //}

    apply plugin: 'shadow'

    jar {
        manifest {
            attributes(
    	    'Main-Class'  :   'Capsule',
            )
        }
    }

    shadow {
        // artifactAttached = false
        classifier = 'shadow'
        destinationDir = "$buildDir/libs"

        exclude 'META-INF/**'
        exclude 'licenses/**' // licenses to thoughtworks CruiseControl, Javolution, and Indiana University Extreme! Labs, none of which are used by Capsule
        exclude 'about.html'
        exclude 'io/takari/aether/localrepo/**'
        exclude 'javax/inject/**'

        exclude 'com/google/common/annotations/**'
        exclude 'com/google/common/cache/**'
        exclude 'com/google/common/escape/**'
        exclude 'com/google/common/eventbus/**'
        exclude 'com/google/common/hash/**'
        exclude 'com/google/common/html/**'
        exclude 'com/google/common/io/**'
        exclude 'com/google/common/math/**'
        exclude 'com/google/common/net/**'
        exclude 'com/google/common/primitives/**'
        exclude 'com/google/common/reflect/**'
        exclude 'com/google/common/util/**'
        exclude 'com/google/common/xml/**'
        exclude 'com/google/thirdparty/**'

        exclude 'com/google/common/base/internal/**'
        exclude 'com/google/common/base/A*'
        exclude 'com/google/common/base/B*'
        exclude 'com/google/common/base/C*'
        exclude 'com/google/common/base/D*'
        exclude 'com/google/common/base/E*'
        //exclude 'com/google/common/base/F*'
        exclude 'com/google/common/base/Final*'
        exclude 'com/google/common/base/Functions*'
        exclude 'com/google/common/base/Functional*'
        exclude 'com/google/common/base/G*'
        exclude 'com/google/common/base/H*'
        exclude 'com/google/common/base/I*'
        exclude 'com/google/common/base/J*'
        exclude 'com/google/common/base/K*'
        exclude 'com/google/common/base/L*'
        exclude 'com/google/common/base/M*'
        exclude 'com/google/common/base/N*'
        exclude 'com/google/common/base/O*'
        //exclude 'com/google/common/base/P*'
        exclude 'com/google/common/base/Pair*'
        exclude 'com/google/common/base/Predicates*'
        exclude 'com/google/common/base/Present*'
        exclude 'com/google/common/base/Q*'
        exclude 'com/google/common/base/R*'
        exclude 'com/google/common/base/S*'
        exclude 'com/google/common/base/T*'
        exclude 'com/google/common/base/U*'
        exclude 'com/google/common/base/V*'
        exclude 'com/google/common/base/W*'
        exclude 'com/google/common/base/X*'
        exclude 'com/google/common/base/Y*'
        exclude 'com/google/common/base/Z*'
        exclude 'com/google/common/collect/A*'
        exclude 'com/google/common/collect/B*'
        exclude 'com/google/common/collect/C*'
        exclude 'com/google/common/collect/D*'
        exclude 'com/google/common/collect/E*'
        exclude 'com/google/common/collect/F*'
        exclude 'com/google/common/collect/G*'
        exclude 'com/google/common/collect/H*'
        //exclude 'com/google/common/collect/I*'
        exclude 'com/google/common/collect/Immut*'
        exclude 'com/google/common/collect/Intern*'
        exclude 'com/google/common/collect/Iterator*'
        exclude 'com/google/common/collect/J*'
        exclude 'com/google/common/collect/K*'
        exclude 'com/google/common/collect/L*'
        exclude 'com/google/common/collect/M*'
        exclude 'com/google/common/collect/N*'
        exclude 'com/google/common/collect/O*'
        exclude 'com/google/common/collect/P*'
        exclude 'com/google/common/collect/Q*'
        exclude 'com/google/common/collect/R*'
        exclude 'com/google/common/collect/S*'
        exclude 'com/google/common/collect/T*'
        exclude 'com/google/common/collect/U*'
        exclude 'com/google/common/collect/V*'
        exclude 'com/google/common/collect/W*'
        exclude 'com/google/common/collect/X*'
        exclude 'com/google/common/collect/Y*'
        exclude 'com/google/common/collect/Z*'

        relocation {
            pattern = 'org.'
            shadedPattern = 'capsule.org.'
        }
        relocation {
            pattern = 'io.'
            shadedPattern = 'capsule.io.'
        }
        relocation {
            pattern = 'com.'
            shadedPattern = 'capsule.com.'
        }
    }

    shadowJar.doLast {
        logger.info("$buildDir/libs/${project.name}-${project.version}-shadow.jar -> $buildDir/libs/${project.name}-${project.version}.jar")
        file("$buildDir/libs/${project.name}-${version}-shadow.jar").renameTo(file("$buildDir/libs/${project.name}-${project.version}.jar"))
    }

    build.dependsOn shadowJar

    //jar {
    //    from { configurations.runtime.collect { zipTree(it) } }
    //    exclude 'META-INF/**'
    //    exclude 'licenses/**' // licenses to thoughtworks CruiseControl, Javolution, and Indiana University Extreme! Labs, none of which are used by Capsule
    //    exclude 'about.html'
    //    exclude 'org/apache/http/client/version.properties'
    //    exclude 'org/apache/http/version.properties'
    //    exclude 'org/apache/maven/model/pom-4.0.0.xml'
    //}


    configure (javadoc) {
        options.links = [ "http://docs.oracle.com/javase/7/docs/api/" ]
        excludes = [ "capsule/**" ]
    }

    install.dependsOn shadowJar
    uploadArchives.dependsOn shadowJar

    // remove dependencies from pom
    //install.repositories.mavenInstaller.pom.whenConfigured {
    //    it.dependencies.removeAll()
    //}

    //configure(install.repositories.mavenInstaller) {
    //    pom.whenConfigured {
    //        it.dependencies.removeAll()
    //    }
    //}


    install.repositories.mavenInstaller {
        pom.whenConfigured {
            it.dependencies.clear()
        }
    }

    uploadArchives.repositories.mavenDeployer {
        pom.whenConfigured {
            it.dependencies.clear()
        }
    }
}

project (':capsule-util') {
    dependencies {
        compile files("${System.getProperty('java.home')}/../lib/tools.jar")
        compile 'com.betfair.net.java.opendmk:core:1.0-b02'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}
